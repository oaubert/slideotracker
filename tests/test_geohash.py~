import unittest
import logging
import numpy as np 
from numpy.testing import assert_equal,assert_almost_equal,assert_equal
import math 
from geohash import GeoHash

logging.basicConfig(level=logging.DEBUG)

class TestGeoHash(unittest.TestCase):
    def setUp(self):
        self.a  = np.array([1,1])
        self.b  = np.array([2,2])
        self.c  = np.array([1.5,2])
        self.m1 = np.array([[1,1],[2,2],[1,2],[1,3]])
        self.m2 = np.array([[3,4],[5,1],[6,2],[1,1]])
        self.m3 = np.concatenate((self.m1,[[0,1]]))
        self.sc = self.m3*2+1
        self.gh = GeoHash(quant=1)

    def test_radian(self):
        r = self.gh._radian(self.a,self.b)
        self.assertTrue(math.degrees(r) == 45)

    def test_origin(self):
        o = self.gh._origin(self.a,self.b)
        assert_equal(o,[1.5,1.5])

    def test_rotate(self):
        r = self.gh._radian(self.a,self.b)
        o = self.gh._origin(self.a,self.b)
        c = self.gh._rotate(1,0,r)        
        assert_almost_equal(c,[0.70,0.70],decimal=2)

    def test_translate(self):
        t = self.gh._translate(self.a,self.b,self.m1)
        r = [[-0.5, -0.5],
             [ 0.5,  0.5],
             [-0.5,  0.5],
             [-0.5,  1.5]] 
        assert_almost_equal(t,r,decimal=2)

    def test_scale(self):
        t = self.gh._scale(self.a,self.b,self.m1)
        r = [[ 0.70, 0.70],
             [ 1.41, 1.41],
             [ 0.70, 1.41],
             [ 0.70, 2.12]]
        assert_almost_equal(t,r,decimal=2)

    def test_transform(self):
        t = self.gh._transform(self.a,self.b,self.m1)
        r = [[-0.70, 0.00],
             [ 0.70, 0.00],
             [ 0.00, 0.70],
             [ 0.70, 1.41]]
        assert_almost_equal(t,r,decimal=2)

    def test_scale_transform(self):
        t = self.gh._transform(self.a,self.b,self.m1)
        s = self.gh._scale(self.a,self.b,t)
        r = [[-0.5, 0.0],
             [ 0.5, 0.0],
             [ 0.0, 0.5],
             [ 0.5, 1.0]]
        assert_almost_equal(s,r,decimal=2)
        
    def test_hash(self):
        h = self.gh._hash(self.m1)
        xa,ya = self.a
        xb,yb = self.b 
        v = h[((xa,ya),(xb,yb))]
        r = [[-0.5, 0.0],
             [ 0.5, 0.0],
             [ 0.0, 0.5],
             [ 0.5, 1.0]]
        assert_almost_equal(v,r,decimal=2)

    def test_addmodel(self):
        self.gh.addmodel('M2',self.m2)        
        point = ( 1.5,  0.0)
        value = [('M1', ((1, 1), (1, 2))),('M2', ((1, 1), (1, 2)))]        
        #self.assertTrue(self.gh.hashtab[point] == value)


    def test_votes(self):
        gh = GeoHash(quant=1)
        gh.addmodel('M1',self.m1)        
        gh.addmodel('M2',self.m2)        
        gh.addmodel('M3',self.m3)        
        votes = gh.votes(self.sc)
        score,model = votes[0] 
        self.assertTrue(model == 'M3')

if __name__ == '__main__':
    unittest.main()
