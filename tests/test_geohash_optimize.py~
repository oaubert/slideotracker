import unittest
import logging
import numpy as np 
from numpy.testing import assert_equal,assert_almost_equal,assert_equal
import math 
from geohash_optimize2 import GeoHash
import geohash_orig 

logging.basicConfig(level=logging.DEBUG)

class TestGeoHash(unittest.TestCase):
    def setUp(self):
        self.a  = np.array([1,1])
        self.b  = np.array([2,2])
        self.c  = np.array([1.5,2])
        self.m1 = np.array([[1,1], [2,2], [1,2], [1,3]])
        self.m2 = np.array([[3,4], [5,1], [6,2], [1,1]])
        self.m3 = np.concatenate((self.m1,[[0,1]]))
        self.sc = self.m3*2+1
        self.gh = GeoHash(quant=1)

    def test_hash(self):
        #test_gh = geohash_orig.GeoHash(quant=1)
        #print test_gh.hash(self.m1)

        h = self.gh._hash(self.m1)
        r = [[ 0.0, -0.5],
             [ 0.0, 0.5],
             [-0.5, 0.0],
             [-1.0, 0.5]]
        assert_almost_equal(h[0], np.cast['int'](r), decimal=2)


    def test_h(self):
        h = self.gh._h(self.a, self.b, self.m3)
        r = [[ 0.0, -0.5],
             [ 0.0, 0.5],
             [-0.5, 0.0],
             [-1.0, 0.5],
             [-0.5,-1.0]]
        assert_almost_equal(h, r, decimal=2)

    def test_addmodel(self):
        self.gh.addmodel('M2', self.m2)        
        point = ( 1.5,  0.0)
        value = [('M1', ((1, 1), (1, 2))),
                 ('M2', ((1, 1), (1, 2)))]        
        #self.assertTrue(self.gh.hashtab[point] == value)


    def test_votes(self):
        gh = GeoHash(quant=5)
        gh.addmodel('M1',self.m1)        
        gh.addmodel('M2',self.m2)        
        gh.addmodel('M3',self.m3)        
        votes = gh.votes(self.sc)
        score, model = votes[0] 
        self.assertTrue(model == 'M3')

    def test_real(self):
        from featextractor import FeatExtractor
        from scikits.learn import neighbors
        NB_QUERY_KP = 4
        GEOHASH_QUANT = 50
        sfiles = {0: 'tests/data/slide-0.jpg', 1: 'tests/data/slide-1.jpg'}

        fe = FeatExtractor()
        sf       = fe.get_slides_feats(sfiles, hessian=1000)
        fkp, fvt = fe._get_image_feats('tests/data/frame-0001.jpg', 100)

        clf = neighbors.Neighbors(n_neighbors=1).fit(fvt)
                              
        for sid, (skp, svt) in sf.items():
            dist, ind = clf.kneighbors(svt[:NB_QUERY_KP])
            #ind_mask = np.argsort(dist, axis=0)[-NB_QUERY_KP:]
            #print dist[ind_mask]
            #sp = [[x,y] for x, y, lap, size, dir, hes in skp[sind[ind_mask]]]
            #fp = [[x,y] for x, y, lap, size, dir, hes in fkp[ind_mask]]
            sp = [[x,y] for x, y, lap, size, dir, hes in skp[:NB_QUERY_KP]]
            fp = [[x,y] for x, y, lap, size, dir, hes in fkp[ind]]

            print sid
            print dist
            print 'slide', [(i, [x,y]) for i, (x,y) in enumerate(np.cast['int'](sp))]
            print 'frame', [(i, [x,y]) for i, (x,y) in enumerate(np.cast['int'](fp))]
            
            geohash = GeoHash(quant=GEOHASH_QUANT)
            geohash.addmodel(sid, sp)
            print 'optimized', geohash.votes(fp)

            gh = geohash_orig.GeoHash(quant=GEOHASH_QUANT)
            gh.addmodel(sid, sp)
            print 'original ', gh.votes(fp)
            print '*'*80

    

if __name__ == '__main__':
    unittest.main()
